"use strict";$(function(){$(function(){$(".site__header").each(function(){new n($(this))}),$(".clients").each(function(){new t($(this))}),$(".main").each(function(){new i($(this))}),$(".project__slider").each(function(){new e($(this))}),$(".form-validation").each(function(){new o($(this))}),$(".all-works").each(function(){new a($(this))}),$(".filter").each(function(){new s($(this))}),$(".wpcf7 input").on({focus:function(){$(this).parent().find(".wpcf7-not-valid-tip").remove()}})});var n=function(n){var i=n,t=$(".menu__close, .menu-btn"),e=!1,o=function(){$(window).on({resize:function(){s()}}),t.on({click:function(){i.toggleClass("open"),t.toggleClass("open")}})},a=function(){i.niceScroll({cursorcolor:"#fff",railalign:"right",cursorwidth:3,cursorborder:0,autohidemode:!1,railpadding:{top:0,right:0,left:0,bottom:0}})},s=function(){e?$(window).width()>1023?i.getNiceScroll().resize():(i.getNiceScroll().remove(),i.removeClass("site__header_nice-scroll"),e=!1):$(window).width()>1023&&(a(),i.addClass("site__header_nice-scroll"),e=!0)},r=function(){o(),s()};r()},i=function(n){var i=n,t=n.find(".main__slider-next"),e=n.find(".main__slider-prev"),o=i.find(".main__slider"),a=null,s=1,r=n.find(".main__clients-pagination"),c=i.find(".main__clients"),l=null,f=5e3,d=1,u=function(){},_=function(){a=new Swiper(o.find(".swiper-container"),{nextButton:t,prevButton:e,slidesPerView:s,loop:!0})},p=function(){l=new Swiper(c.find(".swiper-container"),{pagination:r,slidesPerView:d,loop:!0,autoplay:f,paginationClickable:!0})},h=function(){u(),_(),p()};h()},t=function(n){var i=n,t=(i.find(".clients__list"),i.find(".clients__item").length),e=$(window);console.log(parseInt(t/4));var o=function(){e.on({resize:function(){a(e.width())}})},a=function(n){switch(n){case 1024:console.log("1024");break;case 1024:console.log("1366");break;case 1024:console.log("1920")}},s=function(){o()};s()},e=function(n){var i=n,t=n.find(".project__slider-next"),e=n.find(".project__slider-prev"),o=null,a=1,s=function(){},r=function(){o=new Swiper(i.find(".swiper-container"),{nextButton:t,prevButton:e,slidesPerView:a,loop:!0})},c=function(){s(),r()};c()},o=function(n){var i=this,t=n,e=t.attr("action"),o=t.find("[required]"),a=t.find(".site__form-sent"),s=new XMLHttpRequest,r=function(){t.on({submit:function(){return $.each(o,function(){var n=$(this),i=n.attr("type");if(""==n.val()&&n.parent().addClass("form-validation__error"),"email"==i){var t=/^([a-z0-9_\.-])+@[a-z0-9-]+\.([a-z]{2,4}\.)?[a-z]{2,4}$/i;0==t.test(n.val())&&n.parent().addClass("form-validation__error")}}),t.find(".form-validation__error").length?!1:(c(),!1)}}),o.on({focus:function(){var n=$(this);n.parent().hasClass("form-validation__error")&&n.parent().removeClass("form-validation__error")}})},c=function(){s.abort(),s=$.ajax({url:e,data:t.serialize(),dataType:"html",timeout:2e4,type:"get",success:function(){a.length&&a.addClass("site__form-sent_show")},error:function(n){"abort"!=n.statusText&&alert("Error!")}})},l=function(){r(),t[0].obj=i};l()},a=function(n){var i=this,t=n,e=t.find(".site__title"),o=e.offset().top,a=e.innerHeight(),s=0,r=t.find(".filter"),c=t.find("input"),l=r.offset().top,f=r.innerHeight(),d=0,u=$(window),_=u.scrollTop(),p=!0,h=t.find(".all-works__wrap"),w=t.find(".all-works__loader"),m=1,v=function(){u.on({load:function(){o=e.offset().top,l=r.offset().top,C()},scroll:function(){C(),_+u.height()>h.offset().top+h.height()&&p&&(p=!1,w.addClass("active"),x(!1))},resize:function(){o=e.offset().top,l=r.offset().top,C()}}),c.on({change:function(){p=!1,m=0,w.addClass("active"),x(!0)}})},g=function(){var n;s=e.hasClass("fixed")?e.innerHeight()+parseInt(e.css("margin-bottom")):0,d=r.hasClass("fixed")?r.innerHeight()+parseInt(r.css("margin-bottom")):0,n=s+d,t.css({"padding-top":n})},k=function(n){for(var i=0;i<n.length;i++)h.append('<div class="all-works__item all-works__item_added"><a href="'+n[i].link+'" class="all-works__pic" style="background-image: url('+n[i].pic+')"></a><div class="all-works__footer"><span class="all-works__name">'+n[i].name+'</span><span class="all-works__icon">'+n[i].icon+'</span><span class="all-works__square">'+n[i].square+'<span>m<span>2</span></span></span><a href="'+n[i].link+'" class="btn btn_2"></a></div></div>');setTimeout(function(){$(".all-works__item").removeClass("all-works__item_added")},50)},C=function(){a=e.innerHeight(),f=r.innerHeight(),_=u.scrollTop(),b(),z(),g()},b=function(){_>=l-a?(r.addClass("fixed"),r.css({top:a})):(r.removeClass("fixed"),r.css({top:""}))},x=function(n){$.ajax({url:$("body").data("action"),data:{action:"get_posts",filterData:$(".filter").serialize(),currentPage:m},dataType:"json",type:"get",success:function(i){n&&$(".all-works__item").remove(),w.removeClass("active"),k(i.items),i.col>0?(m++,p=!0):p=!1},error:function(n){"abort"!=n.statusText}})},z=function(){_>o?e.addClass("fixed"):e.removeClass("fixed")},j=function(){C(),v(),t[0].obj=i};j()},s=function(n){var i=this,t=n,e=t.find("input"),o=function(){e.on({change:function(){}})},a=function(){o(),t[0].obj=i};a()}});
//# sourceMappingURL=data:application/json;base64,
