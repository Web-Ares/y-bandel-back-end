"use strict";$(function(){$(function(){$(".site__header").each(function(){new n($(this))}),$(".main").each(function(){new i($(this))}),$(".project__slider").each(function(){new t($(this))}),$(".form-validation").each(function(){new e($(this))}),$(".all-works").each(function(){new o($(this))}),$(".filter").each(function(){new r($(this))})});var n=function(n){var i=n,t=$(".menu__close, .menu-btn"),e=!1,o=function(){$(window).on({resize:function(){s()}}),t.on({click:function(){i.toggleClass("open"),t.toggleClass("open")}})},r=function(){i.niceScroll({cursorcolor:"#fff",railalign:"right",cursorwidth:3,cursorborder:0,autohidemode:!1,railpadding:{top:0,right:0,left:0,bottom:0}})},s=function(){e?$(window).width()>1023?i.getNiceScroll().resize():(i.getNiceScroll().remove(),i.removeClass("site__header_nice-scroll"),e=!1):$(window).width()>1023&&(r(),i.addClass("site__header_nice-scroll"),e=!0)},a=function(){o(),s()};a()},i=function(n){var i=n,t=n.find(".main__slider-next"),e=n.find(".main__slider-prev"),o=i.find(".main__slider"),r=null,s=1,a=n.find(".main__clients-pagination"),f=i.find(".main__clients"),c=null,l=5e3,u=1,d=function(){},p=function(){r=new Swiper(o.find(".swiper-container"),{nextButton:t,prevButton:e,slidesPerView:s,loop:!0})},_=function(){c=new Swiper(f.find(".swiper-container"),{pagination:a,slidesPerView:u,loop:!0,autoplay:l,paginationClickable:!0})},h=function(){d(),p(),_()};h()},t=function(n){var i=n,t=n.find(".project__slider-next"),e=n.find(".project__slider-prev"),o=null,r=1,s=function(){},a=function(){o=new Swiper(i.find(".swiper-container"),{nextButton:t,prevButton:e,slidesPerView:r,loop:!0})},f=function(){s(),a()};f()},e=function(n){var i=this,t=n,e=t.attr("action"),o=t.find("[required]"),r=t.find(".site__form-sent"),s=new XMLHttpRequest,a=function(){t.on({submit:function(){return $.each(o,function(){var n=$(this),i=n.attr("type");if(""==n.val()&&n.parent().addClass("form-validation__error"),"email"==i){var t=/^([a-z0-9_\.-])+@[a-z0-9-]+\.([a-z]{2,4}\.)?[a-z]{2,4}$/i;0==t.test(n.val())&&n.parent().addClass("form-validation__error")}}),t.find(".form-validation__error").length?!1:(f(),!1)}}),o.on({focus:function(){var n=$(this);n.parent().hasClass("form-validation__error")&&n.parent().removeClass("form-validation__error")}})},f=function(){s.abort(),s=$.ajax({url:e,data:t.serialize(),dataType:"html",timeout:2e4,type:"get",success:function(){r.length&&r.addClass("site__form-sent_show")},error:function(n){"abort"!=n.statusText&&alert("Error!")}})},c=function(){a(),t[0].obj=i};c()},o=function(n){var i=this,t=n,e=t.find(".site__title"),o=e.offset().top,r=e.innerHeight(),s=0,a=t.find(".filter"),f=a.offset().top,c=a.innerHeight(),l=0,u=$(window),d=u.scrollTop(),p=function(){u.on({load:function(){o=e.offset().top,f=a.offset().top,h()},scroll:function(){h()},resize:function(){o=e.offset().top,f=a.offset().top,h()}})},_=function(){var n;s=e.hasClass("fixed")?e.innerHeight()+parseInt(e.css("margin-bottom")):0,l=a.hasClass("fixed")?a.innerHeight()+parseInt(a.css("margin-bottom")):0,n=s+l,t.css({"padding-top":n})},h=function(){r=e.innerHeight(),c=a.innerHeight(),d=u.scrollTop(),m(),w(),_()},m=function(){d>=f-r?(a.addClass("fixed"),a.css({top:r})):(a.removeClass("fixed"),a.css({top:""}))},w=function(){d>o?e.addClass("fixed"):e.removeClass("fixed")},v=function(){h(),p(),t[0].obj=i};v()},r=function(n){var i=this,t=n,e=t.find("input"),o=function(){e.on({change:function(){t.submit()}})},r=function(){o(),t[0].obj=i};r()}});
//# sourceMappingURL=data:application/json;base64,
