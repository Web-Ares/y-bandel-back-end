"use strict";$(function(){$(function(){$(".site__header").each(function(){new n($(this))}),$(".main").each(function(){new i($(this))}),$(".project__slider").each(function(){new t($(this))}),$(".form-validation").each(function(){new e($(this))}),$(".all-works").each(function(){new o($(this))}),$(".filter").each(function(){new r($(this))})});var n=function(n){var i=n,t=$(".menu__close, .menu-btn"),e=!1,o=function(){$(window).on({resize:function(){a()}}),t.on({click:function(){i.toggleClass("open"),t.toggleClass("open")}})},r=function(){i.niceScroll({cursorcolor:"#fff",railalign:"right",cursorwidth:3,cursorborder:0,autohidemode:!1,railpadding:{top:0,right:0,left:0,bottom:0}})},a=function(){e?$(window).width()>1023?i.getNiceScroll().resize():(i.getNiceScroll().remove(),i.removeClass("site__header_nice-scroll"),e=!1):$(window).width()>1023&&(r(),i.addClass("site__header_nice-scroll"),e=!0)},s=function(){o(),a()};s()},i=function(n){var i=n,t=n.find(".main__slider-next"),e=n.find(".main__slider-prev"),o=i.find(".main__slider"),r=null,a=1,s=n.find(".main__clients-pagination"),c=i.find(".main__clients"),f=null,l=5e3,u=1,d=function(){},p=function(){r=new Swiper(o.find(".swiper-container"),{nextButton:t,prevButton:e,slidesPerView:a,loop:!0})},_=function(){f=new Swiper(c.find(".swiper-container"),{pagination:s,slidesPerView:u,loop:!0,autoplay:l,paginationClickable:!0})},h=function(){d(),p(),_()};h()},t=function(n){var i=n,t=n.find(".project__slider-next"),e=n.find(".project__slider-prev"),o=null,r=1,a=function(){},s=function(){o=new Swiper(i.find(".swiper-container"),{nextButton:t,prevButton:e,slidesPerView:r,loop:!0})},c=function(){a(),s()};c()},e=function(n){var i=this,t=n,e=t.attr("action"),o=t.find("[required]"),r=t.find(".site__form-sent"),a=new XMLHttpRequest,s=function(){t.on({submit:function(){return $.each(o,function(){var n=$(this),i=n.attr("type");if(""==n.val()&&n.parent().addClass("form-validation__error"),"email"==i){var t=/^([a-z0-9_\.-])+@[a-z0-9-]+\.([a-z]{2,4}\.)?[a-z]{2,4}$/i;0==t.test(n.val())&&n.parent().addClass("form-validation__error")}}),t.find(".form-validation__error").length?!1:(c(),!1)}}),o.on({focus:function(){var n=$(this);n.parent().hasClass("form-validation__error")&&n.parent().removeClass("form-validation__error")}})},c=function(){a.abort(),a=$.ajax({url:e,data:t.serialize(),dataType:"html",timeout:2e4,type:"get",success:function(){r.length&&r.addClass("site__form-sent_show")},error:function(n){"abort"!=n.statusText&&alert("Error!")}})},f=function(){s(),t[0].obj=i};f()},o=function(n){var i=this,t=n,e=t.find(".site__title"),o=e.offset().top,r=e.innerHeight(),a=0,s=t.find(".filter"),c=s.offset().top,f=s.innerHeight(),l=0,u=$(window),d=u.scrollTop(),p=function(){u.on({load:function(){o=e.offset().top,c=s.offset().top,h()},scroll:function(){h()},resize:function(){o=e.offset().top,c=s.offset().top,h()}})},_=function(){var n;a=e.hasClass("fixed")?e.innerHeight()+parseInt(e.css("margin-bottom")):0,l=s.hasClass("fixed")?s.innerHeight()+parseInt(s.css("margin-bottom")):0,n=a+l,t.css({"padding-top":n})},h=function(){r=e.innerHeight(),f=s.innerHeight(),d=u.scrollTop(),w(),m(),_()},w=function(){d>=c-r?(s.addClass("fixed"),s.css({top:r})):(s.removeClass("fixed"),s.css({top:""}))},m=function(){d>o?e.addClass("fixed"):e.removeClass("fixed")},v=function(){h(),p(),t[0].obj=i};v()},r=function(n){var i=this,t=n,e=t.find(".filter__item"),o=[],r=(t.attr("action"),new XMLHttpRequest,function(){e.on({click:function(){o=[],$(this).toggleClass("active"),a()}})}),a=function(){e.each(function(){var n=$(this);n.hasClass("active")&&(o[o.length]=n.data("id"))}),console.log(o)},s=function(){r(),t[0].obj=i};s()}});
//# sourceMappingURL=data:application/json;base64,
