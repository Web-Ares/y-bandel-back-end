"use strict";$(function(){$(function(){$(".site__header").each(function(){new e($(this))}),$(".main").each(function(){new n($(this))}),$(".project__slider").each(function(){new t($(this))}),$(".project__pic").each(function(){$(".project__pic-wrap > a").fancybox({padding:0})}),$(".form-validation").each(function(){new i($(this))}),$(".all-works").each(function(){new o($(this))}),$(".filter").each(function(){new a($(this))}),$(".map").each(function(){new r($(this))}),$(".wpcf7 input").on({focus:function(){$(this).parent().find(".wpcf7-not-valid-tip").remove()}})});var e=function(e){var n=e,t=$(".menu__close, .menu-btn"),i=!1,o=function(){$(window).on({resize:function(){r()}}),t.on({click:function(){n.toggleClass("open"),t.toggleClass("open")}})},a=function(){n.niceScroll({cursorcolor:"#fff",railalign:"right",cursorwidth:3,cursorborder:0,autohidemode:!1,railpadding:{top:0,right:0,left:0,bottom:0}})},r=function(){i?$(window).width()>1023?n.getNiceScroll().resize():(n.getNiceScroll().remove(),n.removeClass("site__header_nice-scroll"),i=!1):$(window).width()>1023&&(a(),n.addClass("site__header_nice-scroll"),i=!0)},s=function(){o(),r()};s()},n=function(e){var n=e,t=e.find(".main__slider-next"),i=e.find(".main__slider-prev"),o=n.find(".main__slider"),a=null,r=1,s=e.find(".main__clients-pagination"),l=n.find(".main__clients"),c=null,f=5e3,d=1,u=function(){},p=function(){$(".site").hasClass("lang_en")&&(t=e.find(".main__slider-prev"),i=e.find(".main__slider-next")),a=new Swiper(o.find(".swiper-container"),{nextButton:t,prevButton:i,autoplay:7e6,slidesPerView:r,loop:!0})},_=function(){c=new Swiper(l.find(".swiper-container"),{pagination:s,slidesPerView:d,loop:!0,autoplay:f,paginationClickable:!0})},m=function(){u(),p(),_()};m()},t=function(e){var n=e,t=e.find(".project__slider-next"),i=e.find(".project__slider-prev"),o=null,a=1,r=function(){},s=function(){o=new Swiper(n.find(".swiper-container"),{nextButton:t,prevButton:i,slidesPerView:a,loop:!0})},l=function(){r(),s()};l()},i=function(e){var n=this,t=e,i=t.attr("action"),o=t.find("[required]"),a=new XMLHttpRequest,r=function(){t.on({submit:function(){return $.each(o,function(){var e=$(this),n=e.attr("type");if(""==e.val()&&e.parent().addClass("form-validation__error"),"email"==n){var t=/^([a-z0-9_\.-])+@[a-z0-9-]+\.([a-z]{2,4}\.)?[a-z]{2,4}$/i;0==t.test(e.val())&&e.parent().addClass("form-validation__error")}}),t.find(".form-validation__error").length?!1:(s(),!1)}}),o.on({focus:function(){var e=$(this);e.parent().hasClass("form-validation__error")&&e.parent().removeClass("form-validation__error")}})},s=function(){a.abort(),a=$.ajax({url:i,data:t.serialize(),dataType:"html",timeout:2e4,type:"get",success:function(){},error:function(e){"abort"!=e.statusText&&alert("Error!")}})},l=function(){r(),t[0].obj=n};l()},o=function(e){var n=this,t=e,i=t.find(".site__title"),o=i.offset().top,a=i.innerHeight(),r=0,s=t.find(".filter"),l=t.find("input"),c=s.offset().top,f=s.innerHeight(),d=0,u=$(window),p=u.scrollTop(),_=!0,m=t.find(".all-works__wrap"),h=t.find(".all-works__loader"),w=1,g=function(){u.on({load:function(){o=i.offset().top,c=s.offset().top,b()},scroll:function(){b(),p+u.height()>m.offset().top+m.height()&&_&&(_=!1,h.addClass("active"),C(!1))},resize:function(){o=i.offset().top,c=s.offset().top,b()}}),l.on({change:function(){_=!1,w=0,h.addClass("active"),C(!0)}})},v=function(){var e;r=i.hasClass("fixed")?i.innerHeight()+parseInt(i.css("margin-bottom")):0,d=s.hasClass("fixed")?s.innerHeight()+parseInt(s.css("margin-bottom")):0,e=r+d,t.css({"padding-top":e})},y=function(e){for(var n=0;n<e.length;n++)m.append('<div class="all-works__item all-works__item_added"><a href="'+e[n].link+'" class="all-works__pic" style="background-image: url('+e[n].pic+')"></a><div class="all-works__info"><div class="all-works__info-column">'+e[n].name+'</div><div class="all-works__info-column">'+e[n].icon+'</div><div class="all-works__info-column all-works__info-square">'+e[n].square+'<span>m<sup>2</sup></span></div><div class="all-works__info-column"><a href="'+e[n].link+'" class="btn btn_2"></a></div></div></div>');setTimeout(function(){$(".all-works__item").removeClass("all-works__item_added")},50)},b=function(){a=i.innerHeight(),f=s.innerHeight(),p=u.scrollTop(),T(),k(),v()},T=function(){p>=c-a?(s.addClass("fixed"),s.css({top:a})):(s.removeClass("fixed"),s.css({top:""}))},C=function(e){$.ajax({url:$("body").data("action"),data:{action:"get_posts",filterData:$(".filter").serialize(),currentPage:w},dataType:"json",type:"get",success:function(n){e&&$(".all-works__item").remove(),h.removeClass("active"),y(n.items),n.col>0?(w++,_=!0):_=!1},error:function(e){"abort"!=e.statusText}})},k=function(){p>o?i.addClass("fixed"):i.removeClass("fixed")},x=function(){b(),g(),t[0].obj=n};x()},a=function(e){var n=this,t=e,i=t.find("input"),o=function(){i.on({change:function(){}})},a=function(){o(),t[0].obj=n};a()},r=function(e){var n,t=e,i=[{featureType:"road",elementType:"geometry",stylers:[{color:"#ffffff"}]},{featureType:"water",elementType:"geometry.fill",stylers:[{color:"#9cd8e7"}]},{featureType:"landscape",elementType:"geometry.fill",stylers:[{color:"#e9e9e9"}]},{featureType:"administrative",elementType:"geometry.fill",stylers:[{color:"#e9e9e9"}]},{featureType:"all",elementType:"labels.text.fill",stylers:[{color:"#a8a8a8"}]},{featureType:"poi",elementType:"geometry.fill",stylers:[{color:"#b8d7c2"}]}],o=new google.maps.StyledMapType(i,{name:"Styled Map"}),a=t.data("center"),r=function(){},s=function(){var e="&language=iw";$(".lang_en").length&&(e="&language=en"),n=new google.maps.Map(document.getElementById("map"),{center:{lat:a[0],lng:a[1]},zoom:17,disableDefaultUI:!0,zoomControl:!0,scrollwheel:!1,other_params:e}),n.mapTypes.set("map_style",o),n.setMapTypeId("map_style")},l=function(){e[0].shablon=self,r(),s()};l()}});
//# sourceMappingURL=data:application/json;base64,
